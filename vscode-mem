#!/bin/sh

# Copyright (c) 2025 Jukka Aho
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -e

initscript=$(basename "$0")

usage() {
  cat <<EOF
usage: $initscript [-h] [--set-max-old-space-size=N] [--nodeapp=NAME] [--vscode-dir=DIR] [--quiet]

EOF
}

description() {
  cat <<EOF
This script exists to address an issue where Node.js, used by VS Code Server,
reserves an excessively large virtual memory space. On HPC cluster head nodes,
virtual memory is often limited (e.g., 64 GB), and this behavior can lead to
memory errors. The problem is not that VS Code itself uses excessive memory,
but that Node.js reserves a large virtual memory area unnecessarily.

This script provides two main functionalities:

1. Print the path to the most recent code-server script and its status.
2. Modify the VS Code Server's code-server script to include a specified
   --max-old-space-size value for Node.js, limiting memory reservation.

This is a workaround for users who cannot set 'ulimit -v unlimited' on their
systems.

EOF
}

extra_help() {
  cat <<EOF
optional arguments:
  -h, --help                     show this help message and exit
  --set-max-old-space-size=N     set the max-old-space-size for Node.js (default: 4096)
  --nodeapp=NAME                 set the Node.js application name (default: node-real)
  --vscode-dir=DIR               set the VS Code Server directory (default: \$HOME/.vscode-server/cli/servers/Stable-*)
  --quiet                        suppress all output except errors

Examples:

    # Check the current status and memory usage
    $initscript

    # Set max-old-space-size to 8192
    $initscript --set-max-old-space-size=8192

    # Specify a custom Node.js application name
    $initscript --nodeapp=node-custom

    # Specify a custom VS Code Server directory
    $initscript --vscode-dir=/custom/path/to/vscode-server

    # Suppress all output except errors
    $initscript --quiet

EOF
}

MAX_OLD_SPACE_SIZE=8192
SET_MAX_OLD_SPACE_SIZE=0
NODEAPP="node"
VSCODE_SERVER_DIR=""
CODE_SERVER_SCRIPT=""
QUIET=0
DEBUG=0

set -- $(printf '%s\n' "$@" | sed 's/=/ /g')

while [ "$#" -gt 0 ]; do
  case "$1" in
  -h | --help)
    SHOW_HELP=1
    shift
    ;;
  --set-max-old-space-size)
    if [ -n "$2" ] && [ "${2#-}" != "$2" ]; then
      # If the next argument starts with a dash or is missing, treat it as missing
      echo "No size provided for --set-max-old-space-size. Using default: $MAX_OLD_SPACE_SIZE MB."
      SET_MAX_OLD_SPACE_SIZE=1
      shift
    elif [ -n "$2" ]; then
      MAX_OLD_SPACE_SIZE=$2
      SET_MAX_OLD_SPACE_SIZE=1
      shift 2
    else
      echo "No size provided for --set-max-old-space-size. Using default: $MAX_OLD_SPACE_SIZE MB."
      SET_MAX_OLD_SPACE_SIZE=1
      shift
    fi
    ;;
  --nodeapp)
    NODEAPP=$2
    shift 2
    ;;
  --vscode-dir)
    VSCODE_SERVER_DIR=$2
    shift 2
    ;;
  --quiet)
    QUIET=1
    shift
    ;;
  --debug)
    DEBUG=1
    shift
    ;;
  -* | --*=)
    usage
    echo "$initscript: error: unsupported argument: $1" >&2
    exit 1
    ;;
  *) # preserve positional arguments
    usage
    echo "$initscript: error: unsupported argument: $1" >&2
    exit 1
    ;;
  esac
done

log() {
  if [ "$QUIET" -eq 0 ]; then
    echo "$@"
  fi
}

log_debug() {
  if [ "$DEBUG" -eq 1 ]; then
    echo "DEBUG: $@"
  fi
}

if [ -n "${SHOW_HELP+x}" ]; then
  usage
  description
  extra_help
  exit 0
fi

# Set default values if not provided
if [ -z "$VSCODE_SERVER_DIR" ]; then
  VSCODE_SERVER_DIR=$(ls -td "$HOME"/.vscode-server/cli/servers/Stable-* 2>/dev/null | head -n 1)
fi

if [ -z "$VSCODE_SERVER_DIR" ]; then
  log "No vscode-server installation found."
  exit 1
fi

CODE_SERVER_SCRIPT="$VSCODE_SERVER_DIR/server/bin/code-server"

if [ ! -f "$CODE_SERVER_SCRIPT" ]; then
  log "code-server script not found in the most recent vscode-server installation."
  exit 1
fi

CODE_SERVER_IDENTIFIER=$(basename "$VSCODE_SERVER_DIR")

log_debug "CODE_SERVER_SCRIPT=$CODE_SERVER_SCRIPT"
log_debug "CODE_SERVER_IDENTIFIER=$CODE_SERVER_IDENTIFIER"
log_debug "NODEAPP=$NODEAPP"

if [ "$SET_MAX_OLD_SPACE_SIZE" -eq 1 ]; then
  # Check if the current value matches the desired value
  if tail -n 1 "$CODE_SERVER_SCRIPT" | grep -q -- "--max-old-space-size=$MAX_OLD_SPACE_SIZE"; then
    log "Did not update code-server script to set --max-old-space-size=$MAX_OLD_SPACE_SIZE: already set"
    exit 0
  fi

  # Modify the last line of the code-server script if necessary
  if ! tail -n 1 "$CODE_SERVER_SCRIPT" | grep -q -- "--max-old-space-size="; then
    sed -i "\$ s|\"\$ROOT/node\"|\"\$ROOT/node\" --max-old-space-size=$MAX_OLD_SPACE_SIZE|" "$CODE_SERVER_SCRIPT"
    log "Updated code-server script to include --max-old-space-size=$MAX_OLD_SPACE_SIZE."
  else
    sed -i "s|--max-old-space-size=[0-9]*|--max-old-space-size=$MAX_OLD_SPACE_SIZE|" "$CODE_SERVER_SCRIPT"
    log "Updated code-server script to set --max-old-space-size=$MAX_OLD_SPACE_SIZE."
  fi
  exit 0
fi

# Default behavior: Display status and memory usage
log "Most recent code-server script:"
log "$CODE_SERVER_SCRIPT"

if tail -n 1 "$CODE_SERVER_SCRIPT" | grep -q -- "--max-old-space-size="; then
  CURRENT_MAX_OLD_SPACE_SIZE=$(tail -n 1 "$CODE_SERVER_SCRIPT" | awk -F'--max-old-space-size=' '{print $2}' | awk '{print $1}')
  log "The code-server script is already hacked with --max-old-space-size=$CURRENT_MAX_OLD_SPACE_SIZE."
else
  log "The code-server script is NOT hacked with a --max-old-space-size flag."
fi

# Attempt to find Node.js processes
NODE_PIDS=$(ps x | grep "$CODE_SERVER_IDENTIFIER/server/$NODEAPP" | grep -v grep | awk '{print $1}')

if [ -z "$NODE_PIDS" ]; then
  log ""
  log "No Node.js processes found for the most recent VS Code Server installation."
  log ""
else
  log ""
  log "Inspecting memory usage for Node.js processes:"
  log ""
  log "$(printf "% 8s %12s %12s %12s %12s\n" "PID" "VmPeak" "VmSize" "VmHWM" "VmRSS")"
  for pid in $NODE_PIDS; do
    VmPeak=$(awk '/VmPeak/ {print $2}' /proc/"$pid"/status)
    VmSize=$(awk '/VmSize/ {print $2}' /proc/"$pid"/status)
    VmHWM=$(awk '/VmHWM/ {print $2}' /proc/"$pid"/status)
    VmRSS=$(awk '/VmRSS/ {print $2}' /proc/"$pid"/status)
    log "$(printf "% 8s %12s %12s %12s %12s\n" "$pid" "$((VmPeak / 1024)) MB" "$((VmSize / 1024)) MB" "$((VmHWM / 1024)) MB" "$((VmRSS / 1024)) MB")"
  done
  log ""
fi

# Check maximum virtual memory size using ulimit
ULIMIT_VMEM=$(ulimit -v)
if [ "$ULIMIT_VMEM" = "unlimited" ]; then
  log "Maximum virtual memory size: unlimited"
  log ""
else
  log "Maximum virtual memory size: $((ULIMIT_VMEM / 1024)) MB"
  log ""
fi

log "Memory term explanations:"
log ""
log "- VmPeak: Peak virtual memory size used by the process."
log "- VmSize: Current virtual memory size allocated to the process."
log "- VmHWM: Peak resident set size (\"high water mark\"), the maximum physical memory used."
log "- VmRSS: Current resident set size, the physical memory currently used."
log ""
log "To restrict memory usage, run:"
log "  $initscript --set-max-old-space-size=N"
log ""
log "Replace N with the desired memory limit in MB (default: 8192)."
